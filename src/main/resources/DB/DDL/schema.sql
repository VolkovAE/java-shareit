;   --одна команда должны быть, если не будет запросов'
--DROP TABLE IF EXISTS Comments;
--DROP TABLE IF EXISTS Bookings;
--DROP TABLE IF EXISTS StatusBooking;
--DROP TABLE IF EXISTS Items;
--DROP TABLE IF EXISTS Requests;
--DROP TABLE IF EXISTS Users;

CREATE TABLE IF NOT EXISTS Users (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
email VARCHAR NOT NULL UNIQUE CHECK (TRIM('	 ' FROM email) != '' AND email LIKE '%@%'),
name  VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS Requests (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
description VARCHAR NOT NULL CHECK(TRIM('	 ' FROM description) != ''),
requestor_id INTEGER NOT NULL REFERENCES Users (id),
created TIMESTAMP NOT NULL
);

CREATE TABLE IF NOT EXISTS Items (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR NOT NULL CHECK(TRIM('	 ' FROM name) != ''),
description VARCHAR NOT NULL CHECK(TRIM('	 ' FROM description) != ''),
is_available BOOLEAN NOT NULL,
owner_id INTEGER NOT NULL REFERENCES Users (id),
request_id INTEGER NULL REFERENCES Requests (id)
);

--CREATE TABLE IF NOT EXISTS StatusBooking (
--id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--name VARCHAR NOT NULL UNIQUE CHECK(TRIM('	 ' FROM name) != ''),
--description VARCHAR NOT NULL DEFAULT ''
--);

CREATE TABLE IF NOT EXISTS Bookings (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
start_date timestamp NOT NULL,
end_date timestamp NOT NULL,
item_id INTEGER NOT NULL REFERENCES Items (id),
booker_id INTEGER NOT NULL REFERENCES Users (id),
status VARCHAR NOT NULL CHECK(TRIM('	 ' FROM status) != '')
);

CREATE TABLE IF NOT EXISTS Comments (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
text VARCHAR NOT NULL CHECK(TRIM('	 ' FROM text) != ''),
item_id INTEGER NOT NULL REFERENCES Items (id),
author_id INTEGER NOT NULL REFERENCES Users (id),
created timestamp NOT NULL
);
